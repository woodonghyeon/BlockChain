1. 정보 보안 3가지 요소 (CIA)
1) 기밀성(Confidentiality) - 허가된 자만 데이터에 접근할 수 있도록 하는 것
> 비밀번호
2) 무결성(Integrity) - 특정한 데이터를 보호해서 정상인 상태로 유지하는 것 (블록체인에서 가장 중요한 요소)
> 암호화폐가 변질되지 않고 정상인 상태로 유지시켜야함
> 비밀번호를 데이터베이스에 담을 때 해시화(암호화 알고리즘) > 데이터가 정상인 것을 보장함
3) 가용성(Availability) - 서비스가 항상 원할하게 제공될 수  있도록 하는 것
> 동일한 거래장부가 많은 컴퓨터에 담겨져 있기 때문에 가용성을 보장할 수 있음
(해커가 디도스 공격을 위해 단일 서버를 지정할 수 없음)
>> 3가지 요소가 잘 갖추어져야 성공적인 보안 요소를 갖추었다고 할 수 있음

4) 블록체인 - 해시 알고리즘이 많이 사용되어져 있어 누구도 장부를 쉽게 건들 수 없어 무결성을 보장함
(장부를 건들면 잘못된 장부를 쉽게 파악할 수 있음 > 해시가 다르기 때문)

2. 해시 - 원 데이터 > 해시 > 이를 상징하는 특정 길이의 데이터로 변환시키는 것
> 원래의 데이터를 조금만 바꾸어도 완전히 다른 해시가 나옴
(ex) A > MD5(해시 알고리즘) > 7FC56270EA7A70FA81A5935B72EACBE29
     B > MD5 > 9D5ED678FE57BCCA610140957AFAB571) 과 같이 A와 B 한 글자 차이여도 전혀 다른 해시 값이 나옴
* MD5 : 과거 대표적인 해시 알고리즘 
(MD5 해시 알고리즘 테스트 사이트 : www.convertstring.com/ko/Hash/MD5)
> 다양한 수학적 로직을 갖추어 값이 조금만 바뀌어도 다른 해시가 나옴
> 어떠한 입력 값을 넣던지 항상 각양 각색의 32자리(128bit)의 16진수(1~9, A~F) 값을 반환함(128비트가 가지는 의미 - 2의 128제곱 경우의 수)
- 내가 받은 프로그램이 해커가 변조한 파일인지 안한 파일인지 확인할 수 있음
- 눈사태 효과 : 암호화된 정보가 큰 폭으로 변화하는 것 > 값을 조금만 바꾸어도 크게 변함
> 좋은 해시 알고리즘은 모두 갖추고 있음
- 요즘은 설치프로그램 바이너리 코드에 해시 알고리즘을 적용시키고 해시 값을 다운로드 웹사이트에 같이 올려둠(변조 여부 파악 가능, 무결성)

3. 해시 알고리즘의 한계(비둘기집)
비둘기집 : 비둘기가 들어갈 수 있는 집이 4개인데 비둘기가 5마리일 때 2마리가 들어갈 수 있는 원리
(n+1개의 상자에 n개의 물건을 넣을 때 n개의 상자에는 두 개의 물건이 들어갈 수 있는 원리 > 충돌 ) > 충돌이 적은 해시 알고리즘이 좋은 알고리즘
- 해시는 복호화가 불가능한 특징이 있음
* MD5, SHA-1은 더이상 사용되어지지 않고 있음

4. MD5, SHA-1
1) MD5 : 해시 알고리즘의 아버지뻘
> 개인 컴퓨터로도 해시 충돌 값을 찾을 수 있는 효율적인 공격 알고리즘이 발표가 되어서 무결성이 보장되지 않아 사용하지 않는 알고리즘이 됨
> 고급 프로그래머가 아니더라도 프로그래밍 언어로 구현할 수 있다는 장점이 있음

2) SHA-1 : MD5보다 더 안전한 알고리즘, 해시 충돌이 발견된 적이 있음
> NSA에서 처음 개발한 해시 암호화 모델

* 충돌은 비둘기집 원리로 충돌을 발견할 수 있음

3) SHA-256 : 현재는 비교적 안전한 SHA-256 이상의 해시화 알고리즘을 사용해야 함

5. 레인보우 테이블 해킹 공격
1) 레인보우 테이블 공격 : 해시는 복호화가 불가능하다는 특징이 있지만 만약 비밀번호가 123456 이라면 MD5 암호화 알고리즘으로 해시화를 시킨 비밀번호를
DB에 저장하고 DB에 저장된 비밀번호를 해커가 예를 들어 미리 0~999999까지 비교할 수 있게 구축해 놓았다면(해시 사전) 이 해시 사전에 대입만 하여 비밀번호를 알아내는 것
> 원래의 데이터를 해시 사전에 매칭시켜 추측하여 해킹함
> 비밀번호를 대 소문자, 숫자, 특수기호를 섞어 사용하여 만드는 이유가 레인보우 테이블 공격 때문임

2) 특정 해시 값에 SALT값(레인보우 테이블 공격을 못하도록 추가하는 문자열)을 더하여 해시 값을 바꿈 
> SALT값이 해커에게 넘어가는 경우도 많으니 사용자가 기본적으로 비밀번호를 어렵게 설정하여야 하는 것이 좋음

3) 레인보우 암호화, 복호화 무료 사이트
-  248dcbaffcdb027cfe5da0f54bd64d6d (2조쿠쿠) : 레인보우 테이블(해시 사전)/ 해시 결과 값 데이터 베이스를 구축 했을 경우 복호화 가능
(MD5 복호화를 도와주는 사이트 : www.md5online.org/md5-decrypt.html > MD5 레인보우 테이블)
> www.md5online.org/md5-encrypt.html > MD5를 사용해 해시화 시킬 수 있는 사이트
* encrypt에서 암호화한 경우에 decrypt 사이트의 레인보우 테이블에 저장되어 역으로 복호화도 가능하게 함
* 비밀번호를 위 사이트 같은 곳에서 돌려볼 시 해킹될 수도 있음

// 코드
Util.Java
- 입력 : 단순 문자열 > getHash > 출력 : SHA-256 해시를 적용한 결과

6. SHA(Secure Hash Algorithm) : 미국 표준 기술 연구소 리스트에 의해서 공표된 표준 해시 알고리즘, 소프트웨어 시장 전반에서 전 세계적으로 가장 많이 사용되고 있는 Hash Algorithm 중 하나
> 보안에 자신이 있는 알고리즘, 현재 SHA-1번대, SHA-2번대(SHA-256, SHA-512 등) 계열이 가장 많이 쓰임
> SHA-0도 존재했으나 쓰이지 않고 현재는 SHA-3까지 나옴
> 현재는 SHA-256, SHA-512, SHA-384 등이 사용되어지고 있음
1) SHA-1번대 : 요즘도 많이 사용되어지고 있지만 구글에 의해서 SHA-1번대에서 충돌이 발견되어 신규 프로젝트에는 사용되지 않고 있음

2) SHA-256 : 256비트, 총 64자리의 문자열로 구성(MD5보다 2배가량 길어 충돌 확률이 기하급수적으로 적음)
> 아직까지는 어떠한 충돌이 발생하지 않음
> 현재까지는 안전하다고 판단하고 사용하고 있지만 언제까지 사용한다는 보장은 어떠한 암호화 알고리즘도 보장하지 못함

7. 채굴(Mining) : 기술적으로 보았을 때 하나의 블록을 형성해 블록체인의 길이를 연장하는 행위
- 블록을 생성하는 방법 > 현재 블록에서 특정 난이도를 만족하는 정답 값(nonce)을 찾는 것, 무차별 대입으로만 찾을 수 있게 되어 있음
- 난이도 : 만약 난이도가 백만이면 해시의 값이 백만보다 작거나 같아야 한다는 의미
- 난이도 백만, 정답 3849356, 이전 해시 0000000000000000000, 현재 해시 0000000000000A3498E > 해시 값이 16진수로 봤을 때 100만보다 작기 때문에 채굴 성공
> 채굴에 성공하면 블록이 넘어감 > 이전 해시 값이 현재 해시를 구하는데 활용이 됨 > 이전 해시 값과 현재 해시 값을 한꺼번에 처리 한 값이 백만보다 작아야지 채굴을 성공할 수 있음
> 블록체인의 변조를 막기 위해서 이전 해시 값과 현재 해시 값을 같이 이용함, 변조가 되면 변조한 해시 부터 뒤에 블록 모두가 같이 변조되어 난이도를 넘어선 값이 나올 수 있음

* SHA-256 변환 사이트 : www.convertstring.com/ko/Hash/SHA256
> 전세계적으로 어떤 값이든 동일한 해시 값을 가지기 때문에 SALT값을 가지지 않으면 해킹 위험이 있음
> SHA-256도 MD5와 마찬가지로 레인보우 테이블을 이용해 복호화가 가능한 알고리즘이므로 기본적으로 어려운 패스워드를 사용해야 함



















